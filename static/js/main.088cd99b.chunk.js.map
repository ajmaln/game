{"version":3,"sources":["components/Particle.js","components/helpers.js","components/Car.js","components/Star.js","components/Factory.c.js","App.js","serviceWorker.js","index.js"],"names":["Particle","args","this","position","velocity","radius","size","lifeSpan","inertia","delete","state","x","y","destroy","context","save","translate","fillStyle","lineWidth","beginPath","moveTo","arc","Math","PI","closePath","fill","restore","rotatePoint","p","center","angle","cos","sin","randomNumBetween","min","max","random","Car","rotation","rotationSpeed","speed","lastShot","create","onDie","i","particle","dir","val","posDelta","keys","up","accelerate","left","rotate","right","down","decelerate","screen","width","height","strokeStyle","lineTo","stroke","Star","KEY","Factory","window","innerWidth","innerHeight","ratio","devicePixelRatio","space","asteroidCount","currentScore","topScore","localStorage","inGame","ship","asteroids","bullets","particles","stars","value","e","setState","console","log","keyCode","addEventListener","handleKeys","bind","handleResize","refs","canvas","getContext","startGame","requestAnimationFrame","update","removeEventListener","scale","globalAlpha","fillRect","length","count","generateAsteroids","checkCollisionsWith","updateObjects","points","Ship","createObject","gameOver","star","howMany","item","group","push","items","index","splice","render","items1","items2","b","a","item1","item2","checkCollision","obj1","obj2","vx","vy","sqrt","endgame","message","className","onClick","ref","Component","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.088cd99b.chunk.js","sourcesContent":["export default class Particle {\n    constructor(args) {\n      this.position = args.position\n      this.velocity = args.velocity\n      this.radius = args.size;\n      this.lifeSpan = args.lifeSpan;\n      this.inertia = 0.98;\n    }\n  \n    destroy(){\n      this.delete = true;\n    }\n  \n    render(state){\n      // Move\n      this.position.x += this.velocity.x;\n      this.position.y += this.velocity.y;\n      this.velocity.x *= this.inertia;\n      this.velocity.y *= this.inertia;\n  \n      // Shrink\n      this.radius -= 0.1;\n      if(this.radius < 0.1) {\n        this.radius = 0.1;\n      }\n      if(this.lifeSpan-- < 0){\n        this.destroy()\n      }\n  \n      // Draw\n      const context = state.context;\n      context.save();\n      context.translate(this.position.x, this.position.y);\n      context.fillStyle = '#ffffff';\n      context.lineWidth = 2;\n      context.beginPath();\n      context.moveTo(0, -this.radius);\n      context.arc(0, 0, this.radius, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.restore();\n    }\n  }\n  ","// From: http://codepen.io/bungu/pen/rawvJe\n\n/**\n * Generates vertices for asteroid polygon with certain count and radius\n * @param  {Number} count   Number of vertices\n * @param  {Number} rad     Maximal radius of polygon\n * @return {Array}        Array of vertices: {x: Number, y: Number}\n */\nexport function asteroidVertices(count, rad) {\n  let p = [];\n  for (let i = 0; i < count; i++) {\n    p[i] = {\n      x: (-Math.sin((360/count)*i*Math.PI/180) + Math.round(Math.random()*2-1)*Math.random()/3)*rad,\n      y: (-Math.cos((360/count)*i*Math.PI/180) + Math.round(Math.random()*2-1)*Math.random()/3)*rad\n    };\n  }\n  return p;\n};\n\n/**\n * Rotate point around center on certain angle\n * @param {Object} p        {x: Number, y: Number}\n * @param {Object} center   {x: Number, y: Number}\n * @param {Number} angle    Angle in radians\n */\nexport function rotatePoint(p, center, angle) {\n  return {\n    x: ((p.x-center.x)*Math.cos(angle) - (p.y-center.y)*Math.sin(angle)) + center.x,\n    y: ((p.x-center.x)*Math.sin(angle) + (p.y-center.y)*Math.cos(angle)) + center.y\n  };\n};\n\n/**\n * Random Number between 2 numbers\n */\nexport function randomNumBetween(min, max) {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Random Number between 2 numbers excluding a certain range\n */\nexport function randomNumBetweenExcluding(min, max, exMin, exMax) {\n  let random = randomNumBetween(min, max);\n  while (random > exMin && random < exMax) {\n    random = Math.random() * (max - min + 1) + min;\n  }\n  return random;\n};\n","// import Bullet from './Bullet';\nimport Particle from './Particle';\nimport { rotatePoint, randomNumBetween } from './helpers';\n\nexport default class Car {\n    constructor(args) {\n        this.position = args.position\n        this.velocity = {\n            x: 0,\n            y: 0\n        }\n        this.rotation = 0;\n        this.rotationSpeed = 3;\n        this.speed = 0.01;\n        this.inertia = 0.99;\n        this.radius = 20;\n        this.lastShot = 0;\n        this.create = args.create;\n        this.onDie = args.onDie;\n    }\n\n    destroy() {\n        this.delete = true;\n        this.onDie();\n\n        // Explode\n        for (let i = 0; i < 60; i++) {\n            const particle = new Particle({\n                lifeSpan: randomNumBetween(60, 100),\n                size: randomNumBetween(1, 4),\n                position: {\n                    x: this.position.x + randomNumBetween(-this.radius / 4, this.radius / 4),\n                    y: this.position.y + randomNumBetween(-this.radius / 4, this.radius / 4)\n                },\n                velocity: {\n                    x: randomNumBetween(-1.5, 1.5),\n                    y: randomNumBetween(-1.5, 1.5)\n                }\n            });\n            this.create(particle, 'particles');\n        }\n    }\n\n    rotate(dir) {\n        if (dir === 'LEFT') {\n            this.rotation -= this.rotationSpeed;\n        }\n        if (dir === 'RIGHT') {\n            this.rotation += this.rotationSpeed;\n        }\n    }\n\n    accelerate(val) {\n        this.velocity.x -= Math.sin(-this.rotation * Math.PI / 180) * this.speed;\n        this.velocity.y -= Math.cos(-this.rotation * Math.PI / 180) * this.speed;\n\n        // Thruster particles\n        let posDelta = rotatePoint({ x: 0, y: -10 }, { x: 0, y: 0 }, (this.rotation - 180) * Math.PI / 180);\n        const particle = new Particle({\n            lifeSpan: randomNumBetween(20, 40),\n            size: randomNumBetween(1, 3),\n            position: {\n                x: this.position.x + posDelta.x + randomNumBetween(-2, 2),\n                y: this.position.y + posDelta.y + randomNumBetween(-2, 2)\n            },\n            velocity: {\n                x: posDelta.x / randomNumBetween(3, 5),\n                y: posDelta.y / randomNumBetween(3, 5)\n            }\n        });\n        this.create(particle, 'particles');\n    }\n\n    decelerate() {\n        this.velocity.x += Math.sin(-this.rotation * Math.PI / 180) * this.speed;\n        this.velocity.y += Math.cos(-this.rotation * Math.PI / 180) * this.speed;\n\n        // Thruster particles\n        let posDelta = rotatePoint({ x: 0, y: -10 }, { x: 0, y: 0 }, (this.rotation - 180) * Math.PI / 180);\n        const particle = new Particle({\n            lifeSpan: randomNumBetween(20, 40),\n            size: randomNumBetween(1, 3),\n            position: {\n                x: this.position.x + posDelta.x + randomNumBetween(-2, 2),\n                y: this.position.y + posDelta.y + randomNumBetween(-2, 2)\n            },\n            velocity: {\n                x: posDelta.x / randomNumBetween(3, 5),\n                y: posDelta.y / randomNumBetween(3, 5)\n            }\n        });\n        this.create(particle, 'particles');\n    }\n\n    render(state) {\n        // Controls\n        if (state.keys.up) {\n            this.accelerate(1);\n        }\n        if (state.keys.left) {\n            this.rotate('LEFT');\n        }\n        if (state.keys.right) {\n            this.rotate('RIGHT');\n        }\n\n        if (state.keys.down) {\n            this.decelerate()\n        }\n        // if(state.keys.space && Date.now() - this.lastShot > 300){\n        //   const bullet = new Bullet({ship: this});\n        //   this.create(bullet, 'bullets');\n        //   this.lastShot = Date.now();\n        // }\n\n        // Move\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n        this.velocity.x *= this.inertia;\n        this.velocity.y *= this.inertia;\n\n        // Rotation\n        if (this.rotation >= 360) {\n            this.rotation -= 360;\n        }\n        if (this.rotation < 0) {\n            this.rotation += 360;\n        }\n\n        // Screen edges\n        if (this.position.x > state.screen.width) this.position.x = 0;\n        else if (this.position.x < 0) this.position.x = state.screen.width;\n        if (this.position.y > state.screen.height) this.position.y = 0;\n        else if (this.position.y < 0) this.position.y = state.screen.height;\n\n        // Draw\n        const context = state.context;\n        context.save();\n        context.translate(this.position.x, this.position.y);\n        context.rotate(this.rotation * Math.PI / 180);\n        context.strokeStyle = '#ffffff';\n        context.fillStyle = '#000000';\n        context.lineWidth = 2;\n        context.beginPath();\n        context.moveTo(0, -15);\n        context.lineTo(10, 10);\n        context.lineTo(5, 7);\n        context.lineTo(-5, 7);\n        context.lineTo(-10, 10);\n        context.closePath();\n        context.fill();\n        context.stroke();\n        context.restore();\n    }\n}\n","// import Bullet from './Bullet';\nimport Particle from './Particle';\nimport { rotatePoint, randomNumBetween } from './helpers';\n\nexport default class Star {\n    constructor(args) {\n        this.position = args.position\n        this.velocity = {\n            x: 0,\n            y: 0\n        }\n        this.rotation = 0;\n        this.rotationSpeed = 3;\n        this.speed = 0.01;\n        this.inertia = 0.99;\n        this.radius = 20;\n        this.lastShot = 0;\n        this.create = args.create;\n        this.onDie = args.onDie;\n    }\n\n    destroy() {\n        this.delete = true;\n        this.onDie();\n\n        // Explode\n        for (let i = 0; i < 60; i++) {\n            const particle = new Particle({\n                lifeSpan: randomNumBetween(60, 100),\n                size: randomNumBetween(1, 4),\n                position: {\n                    x: this.position.x + randomNumBetween(-this.radius / 4, this.radius / 4),\n                    y: this.position.y + randomNumBetween(-this.radius / 4, this.radius / 4)\n                },\n                velocity: {\n                    x: randomNumBetween(-1.5, 1.5),\n                    y: randomNumBetween(-1.5, 1.5)\n                }\n            });\n            this.create(particle, 'particles');\n        }\n    }\n\n    rotate(dir) {\n        if (dir === 'LEFT') {\n            this.rotation -= this.rotationSpeed;\n        }\n        if (dir === 'RIGHT') {\n            this.rotation += this.rotationSpeed;\n        }\n    }\n\n    accelerate(val) {\n        this.velocity.x -= Math.sin(-this.rotation * Math.PI / 180) * this.speed;\n        this.velocity.y -= Math.cos(-this.rotation * Math.PI / 180) * this.speed;\n\n        // Thruster particles\n        let posDelta = rotatePoint({ x: 0, y: -10 }, { x: 0, y: 0 }, (this.rotation - 180) * Math.PI / 180);\n        const particle = new Particle({\n            lifeSpan: randomNumBetween(20, 40),\n            size: randomNumBetween(1, 3),\n            position: {\n                x: this.position.x + posDelta.x + randomNumBetween(-2, 2),\n                y: this.position.y + posDelta.y + randomNumBetween(-2, 2)\n            },\n            velocity: {\n                x: posDelta.x / randomNumBetween(3, 5),\n                y: posDelta.y / randomNumBetween(3, 5)\n            }\n        });\n        this.create(particle, 'particles');\n    }\n\n    decelerate() {\n        this.velocity.x += Math.sin(-this.rotation * Math.PI / 180) * this.speed;\n        this.velocity.y += Math.cos(-this.rotation * Math.PI / 180) * this.speed;\n\n        // Thruster particles\n        let posDelta = rotatePoint({ x: 0, y: -10 }, { x: 0, y: 0 }, (this.rotation - 180) * Math.PI / 180);\n        const particle = new Particle({\n            lifeSpan: randomNumBetween(20, 40),\n            size: 1,\n            position: {\n                x: this.position.x + posDelta.x + randomNumBetween(-2, 2),\n                y: this.position.y + posDelta.y + randomNumBetween(-2, 2)\n            },\n            velocity: {\n                x: posDelta.x / randomNumBetween(3, 5),\n                y: posDelta.y / randomNumBetween(3, 5)\n            }\n        });\n        this.create(particle, 'particles');\n    }\n\n    render(state) {\n        // Controls\n        // if (state.keys.up) {\n        //     this.accelerate(1);\n        // }\n        // if (state.keys.left) {\n        //     this.rotate('LEFT');\n        // }\n        // if (state.keys.right) {\n        //     this.rotate('RIGHT');\n        // }\n\n        // if (state.keys.down) {\n        //     this.decelerate()\n        // }\n        // if(state.keys.space && Date.now() - this.lastShot > 300){\n        //   const bullet = new Bullet({ship: this});\n        //   this.create(bullet, 'bullets');\n        //   this.lastShot = Date.now();\n        // }\n\n        // Move\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n        this.velocity.x *= this.inertia;\n        this.velocity.y *= this.inertia;\n\n        // Rotation\n        if (this.rotation >= 360) {\n            this.rotation -= 360;\n        }\n        if (this.rotation < 0) {\n            this.rotation += 360;\n        }\n\n        // Screen edges\n        if (this.position.x > state.screen.width) this.position.x = 0;\n        else if (this.position.x < 0) this.position.x = state.screen.width;\n        if (this.position.y > state.screen.height) this.position.y = 0;\n        else if (this.position.y < 0) this.position.y = state.screen.height;\n\n        // Draw\n        const context = state.context;\n        context.save();\n        context.translate(this.position.x, this.position.y);\n        context.rotate(this.rotation * Math.PI / 180);\n        context.strokeStyle = '#ffff00';\n        context.fillStyle = '#ffff00';\n        context.lineWidth = 3;\n        context.beginPath();\n        context.moveTo(-5, 10);\n        context.lineTo(15, 10);\n        context.lineTo(-2, -2);\n        context.lineTo(5, 17);\n        context.lineTo(10, -3);\n        // context.lineTo(40, 0);\n        // context.lineTo(-5, 7);\n        // context.lineTo(-10, 10);\n        context.closePath();\n        context.fill();\n        context.stroke();\n        context.restore();\n    }\n}\n","import React, { Component } from 'react';\nimport Ship from './Car';\n// import Asteroid from './Asteroid';\nimport { randomNumBetweenExcluding } from './helpers'\nimport Star from './Star';\n\nconst KEY = {\n    LEFT: 37,\n    RIGHT: 39,\n    UP: 38,\n    DOWN: 40,\n    A: 65,\n    D: 68,\n    W: 87,\n    S: 83,\n    SPACE: 32\n};\n\nexport default class Factory extends Component {\n    constructor() {\n        super();\n        this.state = {\n            screen: {\n                width: window.innerWidth,\n                height: window.innerHeight,\n                ratio: window.devicePixelRatio || 1,\n            },\n            context: null,\n            keys: {\n                left: 0,\n                right: 0,\n                up: 0,\n                down: 0,\n                space: 0,\n            },\n            asteroidCount: 3,\n            currentScore: 0,\n            topScore: localStorage['topscore'] || 0,\n            inGame: false\n        }\n        this.ship = [];\n        this.asteroids = [];\n        this.bullets = [];\n        this.particles = [];\n        this.stars = [];\n    }\n\n    handleResize(value, e) {\n        this.setState({\n            screen: {\n                width: window.innerWidth,\n                height: window.innerHeight,\n                ratio: window.devicePixelRatio || 1,\n            }\n        });\n    }\n\n    handleKeys(value, e) {\n        let keys = this.state.keys;\n        console.log(e.keyCode, value)\n        if (e.keyCode === KEY.LEFT || e.keyCode === KEY.A) keys.left = value;\n        if (e.keyCode === KEY.RIGHT || e.keyCode === KEY.D) keys.right = value;\n        if (e.keyCode === KEY.UP || e.keyCode === KEY.W) keys.up = value;\n        if (e.keyCode === KEY.SPACE) keys.space = value;\n        if (e.keyCode === KEY.DOWN || e.keyCode === KEY.S) keys.down = value;\n        this.setState({\n            keys: keys\n        });\n    }\n\n    componentDidMount() {\n        window.addEventListener('keyup', this.handleKeys.bind(this, false));\n        window.addEventListener('keydown', this.handleKeys.bind(this, true));\n        window.addEventListener('resize', this.handleResize.bind(this, false));\n\n        const context = this.refs.canvas.getContext('2d');\n        this.setState({ context: context });\n        this.startGame();\n        requestAnimationFrame(() => { this.update() });\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keyup', this.handleKeys);\n        window.removeEventListener('keydown', this.handleKeys);\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    update() {\n        const context = this.state.context;\n        const keys = this.state.keys;\n        const ship = this.ship[0];\n\n        context.save();\n        context.scale(this.state.screen.ratio, this.state.screen.ratio);\n\n        // Motion trail\n        context.fillStyle = '#000';\n        context.globalAlpha = 0.4;\n        context.fillRect(0, 0, this.state.screen.width, this.state.screen.height);\n        context.globalAlpha = 1;\n\n        // Next set of asteroids\n        if (!this.asteroids.length) {\n            let count = this.state.asteroidCount + 1;\n            this.setState({ asteroidCount: count });\n            this.generateAsteroids(count)\n        }\n\n        // Check for colisions\n        this.checkCollisionsWith(this.bullets, this.asteroids);\n        this.checkCollisionsWith(this.ship, this.asteroids);\n        this.checkCollisionsWith(this.ship, this.stars)\n\n        // Remove or render\n        this.updateObjects(this.particles, 'particles')\n        this.updateObjects(this.asteroids, 'asteroids')\n        this.updateObjects(this.bullets, 'bullets')\n        this.updateObjects(this.ship, 'ship')\n        this.updateObjects(this.stars, 'stars')\n\n        context.restore();\n\n        // Next frame\n        requestAnimationFrame(() => { this.update() });\n    }\n\n    addScore(points) {\n        if (this.state.inGame) {\n            this.setState({\n                currentScore: this.state.currentScore + points,\n            });\n        }\n    }\n\n    startGame() {\n        this.setState({\n            inGame: true,\n            currentScore: 0,\n        });\n\n        // Make ship\n        let ship = new Ship({\n            position: {\n                x: this.state.screen.width / 2,\n                y: this.state.screen.height / 2\n            },\n            create: this.createObject.bind(this),\n            onDie: this.gameOver.bind(this)\n        });\n        this.createObject(ship, 'ship');\n\n\n        let star = new Star({\n            position: {\n                x: this.state.screen.width - 100,\n                y: this.state.screen.height / 2\n            },\n            create: this.createObject.bind(this),\n            onDie: this.gameOver.bind(this)\n        });\n        this.createObject(star, 'stars');\n\n        // Make asteroids\n        this.asteroids = [];\n        // this.generateAsteroids(0)\n    }\n\n    gameOver() {\n        this.setState({\n            inGame: false,\n        });\n\n        // Replace top score\n        if (this.state.currentScore > this.state.topScore) {\n            this.setState({\n                topScore: this.state.currentScore,\n            });\n            localStorage['topscore'] = this.state.currentScore;\n        }\n    }\n\n    generateAsteroids(howMany) {\n        let asteroids = [];\n        let ship = this.ship[0];\n        // for (let i = 0; i < howMany; i++) {\n        //   let asteroid = new Asteroid({\n        //     size: 80,\n        //     position: {\n        //       x: randomNumBetweenExcluding(0, this.state.screen.width, ship.position.x-60, ship.position.x+60),\n        //       y: randomNumBetweenExcluding(0, this.state.screen.height, ship.position.y-60, ship.position.y+60)\n        //     },\n        //     create: this.createObject.bind(this),\n        //     addScore: this.addScore.bind(this)\n        //   });\n        //   this.createObject(asteroid, 'asteroids');\n        // }\n    }\n\n    createObject(item, group) {\n        this[group].push(item);\n    }\n\n    updateObjects(items, group) {\n        let index = 0;\n        for (let item of items) {\n            if (item.delete) {\n                this[group].splice(index, 1);\n            } else {\n                items[index].render(this.state);\n            }\n            index++;\n        }\n    }\n\n    checkCollisionsWith(items1, items2) {\n        var a = items1.length - 1;\n        var b;\n        for (a; a > -1; --a) {\n            b = items2.length - 1;\n            for (b; b > -1; --b) {\n                var item1 = items1[a];\n                var item2 = items2[b];\n                if (this.checkCollision(item1, item2)) {\n                    item1.destroy();\n                    item2.destroy();\n                }\n            }\n        }\n    }\n\n    checkCollision(obj1, obj2) {\n        var vx = obj1.position.x - obj2.position.x;\n        var vy = obj1.position.y - obj2.position.y;\n        var length = Math.sqrt(vx * vx + vy * vy);\n        if (length < obj1.radius + obj2.radius) {\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        let endgame;\n        let message;\n\n        if (this.state.currentScore <= 0) {\n            message = '0 points... So sad.';\n        } else if (this.state.currentScore >= this.state.topScore) {\n            message = 'Top score with ' + this.state.currentScore + ' points. Woo!';\n        } else {\n            message = this.state.currentScore + ' Points though :)'\n        }\n\n        if (!this.state.inGame) {\n            endgame = (\n                <div className=\"endgame\">\n                    <p>Game over, man!</p>\n                    <p>{message}</p>\n                    <button\n                        onClick={this.startGame.bind(this)}>\n                        try again?\n          </button>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {endgame}\n                {/* <span className=\"score current-score\" >Score: {this.state.currentScore}</span>\n        <span className=\"score top-score\" >Top Score: {this.state.topScore}</span>\n        <span className=\"controls\" >\n          Use [A][S][W][D] or [←][↑][↓][→] to MOVE<br/>\n          Use [SPACE] to SHOOT\n        </span> */}\n                <canvas ref=\"canvas\"\n                    width={this.state.screen.width * this.state.screen.ratio}\n                    height={this.state.screen.height * this.state.screen.ratio}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Factory from './components/Factory.c';\n\nfunction App() {\n  return (\n      <Factory />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}